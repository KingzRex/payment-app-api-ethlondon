// Generated by Xata Codegen 0.29.3. Please do not edit.
import { buildClient } from "@xata.io/client";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from "@xata.io/client";

const tables = [
  {
    name: "VirtualAccount",
    columns: [
      { name: "accountName", type: "string" },
      { name: "accountNumber", type: "string" },
      { name: "bankName", type: "string" },
      { name: "txRef", type: "string" },
      { name: "accountBalance", type: "float" },
      { name: "user", type: "link", link: { table: "User" } },
      { name: "orderRef", type: "string" },
    ],
  },
  {
    name: "User",
    columns: [
      { name: "firstName", type: "string" },
      { name: "lastName", type: "string" },
      { name: "phoneNumber", type: "string" },
      { name: "bvn", type: "string" },
      { name: "email", type: "string", unique: true },
      {
        name: "smartWalletAddress",
        type: "string",
        notNull: true,
        defaultValue: "",
      },
    ],
    revLinks: [
      { column: "user", table: "VirtualAccount" },
      { column: "user", table: "FiatDepositTransaction" },
    ],
  },
  {
    name: "FiatDepositTransaction",
    columns: [
      { name: "fiatAmount", type: "float", notNull: true, defaultValue: "0" },
      { name: "cryptoAmount", type: "float", notNull: true, defaultValue: "0" },
      { name: "fiatRate", type: "float", notNull: true, defaultValue: "0" },
      {
        name: "status",
        type: "string",
        notNull: true,
        defaultValue: "pending",
      },
      { name: "user", type: "link", link: { table: "User" } },
    ],
  },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type VirtualAccount = InferredTypes["VirtualAccount"];
export type VirtualAccountRecord = VirtualAccount & XataRecord;

export type User = InferredTypes["User"];
export type UserRecord = User & XataRecord;

export type FiatDepositTransaction = InferredTypes["FiatDepositTransaction"];
export type FiatDepositTransactionRecord = FiatDepositTransaction & XataRecord;

export type DatabaseSchema = {
  VirtualAccount: VirtualAccountRecord;
  User: UserRecord;
  FiatDepositTransaction: FiatDepositTransactionRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL: "https://Blocverse-hack-es1pni.us-east-1.xata.sh/db/payment-app",
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient();
  return instance;
};
